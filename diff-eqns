function dx = diff_eqns(t,x)
dx = zeros(12 + 12, 1);                  % dx(1:18) : R1, R2 , dx(19:24) : omega1, omega2

global J1P J1dP J2 J2P m1 m2 g l1 l2 e3_I
Constants

R1_BI = [x(1:3)'; x(4:6)'; x(7:9)']; % Rotation matrix from Body frame to Inertial frame
R2_BI = [x(10:12)'; x(13:15)'; x(16:18)']; % Rotation matrix from Body frame to Inertial frame
omega1 = x(19:21);                   % Angular velocy
omega2 = x(22:24);                   % Angular velocy
Rdot1_BI = R1_BI * cross_matrix(omega1);
Rdot2_BI = R2_BI * cross_matrix(omega2);
e3_B1 = R1_BI' * e3_I;                % Third unit vector of the Body frame
e3_B2 = R2_BI' * e3_I;                % Third unit vector of the Body frame

A = omega1' * J1P * cross_matrix(omega1) - l1^2 * m1 * omega1' * cross_matrix(e3_I) * cross_matrix(omega1) * cross_matrix(e3_I) - l1 * l2 * m2* omega2' * cross_matrix(e3_I) * cross_matrix(omega2) * R2_BI' * R1_BI * cross_matrix(e3_I) - m1 * g * l1 * e3_I' * cross_matrix(e3_B1) - m2 * g * l1 * e3_I' * cross_matrix(e3_B1);
B = omega2' * J2 * cross_matrix(omega2) - l2^2 * m2 * omega2' * cross_matrix(e3_I) * cross_matrix(omega2) * cross_matrix(e3_I) - l1 * l2 * m2* omega1' * cross_matrix(e3_I) * cross_matrix(omega1) * R1_BI' * R2_BI * cross_matrix(e3_I) - m2 * g * l2 * e3_I' * cross_matrix(e3_B2);
C = [J1dP, - m2 * l1 * l2 * cross_matrix(e3_I) * R1_BI' * R2_BI * cross_matrix(e3_I);
     -m2 * l1 * l2 * cross_matrix(e3_I) * R2_BI' * R1_BI * cross_matrix(e3_I), J2P];
D = inv(C) * [A B]';
% keyboard
dx(1:3) = Rdot1_BI(1, 1:3);
dx(4:6) = Rdot1_BI(2, 1:3);
dx(7:9) = Rdot1_BI(3, 1:3);
dx(10:12) = Rdot2_BI(1, 1:3);
dx(13:15) = Rdot2_BI(2, 1:3);
dx(16:18) = Rdot2_BI(3, 1:3);
dx(19:21) = D(1:3);
dx(22:24) = D(4:6);
